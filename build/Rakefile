require 'rake/clean'
require 'fileutils'
require 'json'

Encoding.default_external = Encoding::UTF_8

FILES = {
  :seasons => 'rsssf-seasons.json',
  :teams => 'teams.json',
  :teams_mapping => 'teams.txt',
  :tiers => 'tiers.json',
  :tiers_mapping => 'tiers.txt',
  :tier_sizes => 'tier-sizes.json',
  :tier_sizes_reordered => 'tier-sizes-reordered.json',
  :seasons_mapped => 'seasons-mapped.json',
  :seasons_reordered => 'seasons-reordered.json',
  :final => 'football-league-positions.json',
}

# Files that are 'final' and used in the ext/ directory.
#
TO_EXT = {
  'teams' => FILES[:teams],
  'tiers' => FILES[:tiers],
  'tierSizes' => FILES[:tier_sizes_reordered],
  'seasons' => FILES[:seasons_reordered],
}

# Only include the JSON files for clean, as text files are manually
# created.
#
CLEAN.push(*FileList[FILES.values.select {|x| x.include?('json')}])
CLOBBER.push(*FileList[FILES.values])

desc 'Concatenate TO_EXT files into one and copy to ext/.'
file FILES[:final] => TO_EXT.values do
  puts "Making #{FILES[:final]} from:"
  TO_EXT.values.each {|x| puts "* #{x}"}

  final = {}

  TO_EXT.each {|k, f| final[k] = load_json(f)}

  write_json(FILES[:final], final, :generate)

  FileUtils.copy(FILES[:final], '../ext/')
end

desc 'List the unique team names from the seasons file.'
task :list_teams do
  puts load_json(FILES[:seasons]).
    map {|s, e| e.map {|d| d['table'].map {|t| t[2]}}}.
    flatten.uniq.sort
end

desc 'List the divisions from the seasons file with the header size.'
task :list_divisions do
  puts load_json(FILES[:seasons]).
    map {|s, e| e.map {|d|
      "#{d['info'].join(', ')} (#{d['header'].size})"
    }}.flatten.uniq.sort
end

desc 'List the tiers with their names.'
task :list_tiers do
  puts load_json(FILES[:seasons]).
    map {|s, e| e.map {|d| d['info'].map {|i| "#{d['tier']}=#{i}"}}}.
    flatten.uniq.sort
end

# Like teams.txt, tiers.txt is hand-generated. Use list_tiers to help;
# a lot of the lines can be deleted and so ignored.
#
desc 'Create JSON tiers file from the tiers mapping list.'
file FILES[:tiers] do
  create_from_mapping(:tiers)
end

desc 'Create tier sizes file from the seasons file.'
file FILES[:tier_sizes] => [FILES[:seasons]] do
  tier_sizes = {}

  load_json(FILES[:seasons]).each do |season, divisions|
    divisions.each do |division|
      tier_sizes[division['tier']] ||= {}
      tier_sizes[division['tier']][season] ||= []
      tier_sizes[division['tier']][season] << division['table'].size
    end
  end

  puts ['Wrote tier sizes to ', FILES[:tier_sizes]].join

  write_json(FILES[:tier_sizes], tier_sizes)
end

# See the comment for seasons_reordered for an idea of the structure,
# or view the output directly (it's small).
#
desc 'Reorder the tier sizes file for use in JS'
file FILES[:tier_sizes_reordered] => [FILES[:tier_sizes]] do
  tier_sizes = load_json(FILES[:tier_sizes])
  all_seasons = tier_sizes['1'].keys

  reordered = tier_sizes.map do |tier, seasons|
    {
      'tier' => tier,
      'seasons' => all_seasons.sort.map do |season|
        {'season' => season, 'size' => (seasons[season] || [0]).max}
      end,
    }
  end.sort_by {|t| t['tier']}

  puts ['Reordered data from ', FILES[:tier_sizes], ' in ',
        FILES[:tier_sizes_reordered]].join

  write_json(FILES[:tier_sizes_reordered], reordered)
end

# The teams.txt file needs to be created by hand; use the list_teams
# task to help. The format is just <ID>=<name>, where <name> is from
# the seasons file.
#
desc 'Create JSON teams file from the teams mapping list.'
file FILES[:teams] do
  create_from_mapping(:teams)
end

desc 'Map the team IDs from teams.json to the seasons file.'
file FILES[:seasons_mapped] => [FILES[:teams], FILES[:seasons]] do
  teams = {}
  seasons = load_json(FILES[:seasons])
  nils = []

  load_json(FILES[:teams]).each do |id, names|
    names.each {|n| teams[n] = id}
  end

  seasons.each do |season, divisions|
    divisions.each_with_index do |division, i|
      division['table'].each_with_index do |row, j|
        nils << row[2] if teams[row[2]].nil?

        seasons[season][i]['table'][j][2] = teams[row[2]]
      end
    end
  end

  unless nils.empty?
    puts 'Teams without mappings found. Add these to teams.txt and regenerate teams.json:'
    puts nils.join("\n")
    exit 1
  end

  puts ['Replacing names in ', FILES[:seasons], ' with IDs from ',
        FILES[:teams], ' in ', FILES[:seasons_mapped]].join

  write_json(FILES[:seasons_mapped], seasons)
end

# Put the seasons file in a structure like this:
#   [
#     {
#       "team": "aberdare",
#       "seasons": [
#         {
#           "season": "1926-27",
#           "position": 22,
#           "tier": 3,
#           "effectivePosition": 66
#         },
#         ... etc ...
#       ]
#     },
#     ... etc ...
#   ]
#
# There are blank entries for all teams that weren't there this
# season, so that D3 handles gaps correctly. (Accrington Stanley!)
#
desc 'Reorder the seasons file for use in JS'
file FILES[:seasons_reordered] => [FILES[:seasons_mapped],
                                   FILES[:tier_sizes],
                                   FILES[:teams]] do

  teams = {}
  team_names = load_json(FILES[:teams]).keys
  tier_sizes = load_json(FILES[:tier_sizes])

  load_json(FILES[:seasons_mapped]).each do |season, divisions|
    season_teams = []

    divisions.each do |division|
      division['table'].each do |row|
        team = row[2]
        season_teams << team
        position = row[1]
        position = position.strip.to_i if position.is_a?(String)

        offset = (1...(division['tier'])).inject(0) do |sum, tier|
          sum + tier_sizes[tier.to_s][season].first
        end

        teams[team] ||= []
        teams[team] << {
          'season' => season,
          'tier' => division['tier'],
          'position' => position,
          'effectivePosition' => position + offset.to_i,
        }
      end
    end

    (team_names - season_teams).each do |team|
      teams[team] ||= []
      teams[team] << {'season' => season}
    end
  end

  reordered = teams.map do |team, seasons|
    {'team' => team, 'seasons' => seasons.sort_by {|s| s['season']}}
  end.sort_by {|t| t['team']}

  puts ['Reordered data from ', FILES[:seasons_mapped], ' in ',
        FILES[:seasons_reordered]].join

  write_json(FILES[:seasons_reordered], reordered)
end

# Download and parse league tables from the RSSSF. Positional
# command-line arguments are:
# 1) starting year;
# 2) finishing year (beginning of final season);
# 3) base address, tables will be found from the #year_to_season form
#    of the year.
#
# This excludes any tiers below the fourth (the Conference is outside
# the football league), and works under the assumption that the tables
# will be in the format found at:
#   http://www.rsssf.com/engpaul/FLA/league.html
#
desc 'Parse league tables from the RSSSF. See rsssf_parsing.rb.'
file FILES[:seasons], [:start, :finish, :base] do |t, args|
  require './rsssf_parsing'

  args.with_defaults(:start => 1888,
                     :finish => 2007,
                     :base => 'http://www.rsssf.com/engpaul/FLA/')

  seasons = {}
  range = (args[:start].to_i)..(args[:finish].to_i)

  range.map {|y| year_to_season(y)}.each do |season|
    begin
      page = Nokogiri::HTML(open("#{args[:base]}#{season}.html").read)
    rescue OpenURI::HTTPError
      next
    end

    tier = 1

    page.search('pre').each do |pre|
      divisions, tier = *parse_rsssf_tables(pre.inner_text, tier)

      seasons[season] ||= []

      if divisions
        seasons[season] += divisions.select {|d| d[:tier] <= 4}
      end
    end
  end

  write_json(FILES[:seasons], seasons)
end

# For seasons not covered by the RSSSF, this adds them from some
# hand-generated TSV (tab-separated files). The format is demonstrated
# in manual/2011-12.1.tsv.example, although it doesn't have to be
# exact, the rules are just:
# 1) the filename is season.tier.tsv, where season is like '2010-11';
# 2) start with a header / info line, containing no tabs;
# 3) follow with the header row, separated by tabs, and doesn't start
#    with a number;
# 4) and then the table itself, each row of which must start with a
#    number.
#
desc 'Add tab-separated league tables to RSSSF file.'
task :add_tsvs, [:directory] do |t, args|
  args.with_defaults(:directory => 'manual')
  seasons = load_json(FILES[:seasons])

  Dir["#{args[:directory]}/*.*.tsv"].each do |filename|
    season, tier = filename.split('/').last.split('.')
    division = {'tier' => tier.to_i}

    open(filename).each_line do |line|
      line = line.strip.split("\t")

      (division['info'] = line; next) if line.length == 1

      # Dummy item to take the places of the 'caps' item from the
      # RSSSF parser.
      #
      line.unshift(nil)

      (division['header'] = line; next) unless line[1].to_i > 0

      division['table'] ||= []
      division['table'] << line.map {|x| x.strip! if x; x =~ /^\d+$/ ? x.to_i : x}
    end

    seasons[season] ||= []
    seasons[season] << division
  end

  write_json(FILES[:seasons], seasons)
end

def create_from_mapping(key)
  mapping = "#{key}_mapping".to_sym
  mapped = {}

  unless File.exist?(FILES[mapping])
    raise "#{FILES[mapping]} missing; it needs to be created by hand"
  end

  puts ['Creating mapping in ', FILES[key], ' from ',
        FILES[mapping]].join

  open(FILES[mapping]).each_line do |line|
    id, name = *line.strip.split('=')

    mapped[id] ||= []
    mapped[id] << name
  end

  puts ['Writing ', mapped.values.flatten.size, ' names to ',
        mapped.keys.size, ' IDs'].join

  write_json(FILES[key], mapped)
end

def load_json(f); c = open(f).read; JSON.parse(c); end

def write_json(filename, obj, meth=:pretty_generate)
  file = open(filename, 'w')
  file.puts(JSON.send(meth, obj))
  file.close
end

# Load any .rake files in the same directory.
#
Dir['*.rake'].each {|t| load(t)}
